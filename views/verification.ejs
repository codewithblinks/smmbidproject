<!DOCTYPE html>
<html lang="en" dir="ltr">

<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <title>
    SMMBIMEDIA | Build a better customer experience
  </title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <base href="/">
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/nice-select2/dist/css/nice-select2.min.css">
  <link rel="stylesheet" href="assets/css/verification.css">
  <link rel="stylesheet" type="text/css" media="screen" href="assets/css/perfect-scrollbar.min.css" />
  <link rel="stylesheet" type="text/css" media="screen" href="assets/css/style.css" />
  <link defer="" rel="stylesheet" type="text/css" media="screen" href="assets/css/animate.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
  <link rel="shortcut icon" href="assets/images/favicon.png" type="image/x-icon" />
  <script src="assets/js/perfect-scrollbar.min.js"></script>
  <script defer="" src="assets/js/popper.min.js"></script>
  <script defer="" src="assets/js/tippy-bundle.umd.min.js"></script>
  <script defer="" src="assets/js/sweetalert.min.js"></script>

</head>

<body x-data="main" class="relative overflow-x-hidden font-nunito text-sm font-normal antialiased"
  :class="[ $store.app.sidebar ? 'toggle-sidebar' : '', $store.app.theme === 'dark' || $store.app.isDarkMode ?  'dark' : '', $store.app.menu, $store.app.layout,$store.app.rtlClass]">
  <!-- sidebar menu overlay -->
  <div x-cloak="" class="fixed inset-0 z-50 bg-[black]/60 lg:hidden" :class="{'hidden' : !$store.app.sidebar}"
    @click="$store.app.toggleSidebar()"></div>

  <!-- screen loader -->
  <div
    class="screen_loader animate__animated fixed inset-0 z-[60] grid place-content-center bg-[#fafafa] dark:bg-[#060818]">
    <svg width="64" height="64" viewbox="0 0 135 135" xmlns="http://www.w3.org/2000/svg" fill="#4361ee">
      <path
        d="M67.447 58c5.523 0 10-4.477 10-10s-4.477-10-10-10-10 4.477-10 10 4.477 10 10 10zm9.448 9.447c0 5.523 4.477 10 10 10 5.522 0 10-4.477 10-10s-4.478-10-10-10c-5.523 0-10 4.477-10 10zm-9.448 9.448c-5.523 0-10 4.477-10 10 0 5.522 4.477 10 10 10s10-4.478 10-10c0-5.523-4.477-10-10-10zM58 67.447c0-5.523-4.477-10-10-10s-10 4.477-10 10 4.477 10 10 10 10-4.477 10-10z">
        <animatetransform attributename="transform" type="rotate" from="0 67 67" to="-360 67 67" dur="2.5s"
          repeatcount="indefinite"></animatetransform>
      </path>
      <path
        d="M28.19 40.31c6.627 0 12-5.374 12-12 0-6.628-5.373-12-12-12-6.628 0-12 5.372-12 12 0 6.626 5.372 12 12 12zm30.72-19.825c4.686 4.687 12.284 4.687 16.97 0 4.686-4.686 4.686-12.284 0-16.97-4.686-4.687-12.284-4.687-16.97 0-4.687 4.686-4.687 12.284 0 16.97zm35.74 7.705c0 6.627 5.37 12 12 12 6.626 0 12-5.373 12-12 0-6.628-5.374-12-12-12-6.63 0-12 5.372-12 12zm19.822 30.72c-4.686 4.686-4.686 12.284 0 16.97 4.687 4.686 12.285 4.686 16.97 0 4.687-4.686 4.687-12.284 0-16.97-4.685-4.687-12.283-4.687-16.97 0zm-7.704 35.74c-6.627 0-12 5.37-12 12 0 6.626 5.373 12 12 12s12-5.374 12-12c0-6.63-5.373-12-12-12zm-30.72 19.822c-4.686-4.686-12.284-4.686-16.97 0-4.686 4.687-4.686 12.285 0 16.97 4.686 4.687 12.284 4.687 16.97 0 4.687-4.685 4.687-12.283 0-16.97zm-35.74-7.704c0-6.627-5.372-12-12-12-6.626 0-12 5.373-12 12s5.374 12 12 12c6.628 0 12-5.373 12-12zm-19.823-30.72c4.687-4.686 4.687-12.284 0-16.97-4.686-4.686-12.284-4.686-16.97 0-4.687 4.686-4.687 12.284 0 16.97 4.686 4.687 12.284 4.687 16.97 0z">
        <animatetransform attributename="transform" type="rotate" from="0 67 67" to="360 67 67" dur="8s"
          repeatcount="indefinite"></animatetransform>
      </path>
    </svg>
  </div>

  <!-- scroll to top button -->
  <div class="fixed bottom-6 z-50 ltr:right-6 rtl:left-6" x-data="scrollToTop">
    <template x-if="showTopButton">
      <button type="button"
        class="btn btn-outline-primary animate-pulse rounded-full bg-[#fafafa] p-2 dark:bg-[#060818] dark:hover:bg-primary"
        @click="goToTop">
        <svg width="24" height="24" class="h-4 w-4" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path opacity="0.5" fill-rule="evenodd" clip-rule="evenodd"
            d="M12 20.75C12.4142 20.75 12.75 20.4142 12.75 20L12.75 10.75L11.25 10.75L11.25 20C11.25 20.4142 11.5858 20.75 12 20.75Z"
            fill="currentColor"></path>
          <path
            d="M6.00002 10.75C5.69667 10.75 5.4232 10.5673 5.30711 10.287C5.19103 10.0068 5.25519 9.68417 5.46969 9.46967L11.4697 3.46967C11.6103 3.32902 11.8011 3.25 12 3.25C12.1989 3.25 12.3897 3.32902 12.5304 3.46967L18.5304 9.46967C18.7449 9.68417 18.809 10.0068 18.6929 10.287C18.5768 10.5673 18.3034 10.75 18 10.75L6.00002 10.75Z"
            fill="currentColor"></path>
        </svg>
      </button>
    </template>
  </div>

  <!-- start theme customizer section -->

  <!-- end theme customizer section -->

  <div class="main-container min-h-screen text-black dark:text-white-dark" :class="[$store.app.navbar]">
    <!-- start sidebar section -->
    <div :class="{'dark text-white-dark' : $store.app.semidark}">
      <%- include('partials/sidebar.ejs') %>
    </div>
    <!-- end sidebar section -->

    <div class="main-content flex flex-col min-h-screen">
      <!-- start header section -->
      <header class="z-40" :class="{'dark' : $store.app.semidark && $store.app.menu === 'horizontal'}">
        <div class="shadow-sm">
          <div class="relative flex w-full items-center bg-white px-5 py-2.5 dark:bg-[#0e1726]">
            <div class="horizontal-logo flex items-center justify-between ltr:mr-2 rtl:ml-2 lg:hidden">
              <a class="main-logo flex shrink-0 items-center">
                <% if (user.profile_picture) { %>
                  <img class="inline w-8 ltr:-ml-1 rtl:-mr-1" style="border-radius: 50%;"
                    src="<%= user.profile_picture %>" alt="image" />

                  <% } else { %>
                    <img class="inline w-8 ltr:-ml-1 rtl:-mr-1" src="../assets/images/logo.png" alt="image" />
                    <% } %>
              </a>

              <a href="javascript:;"
                class="collapse-icon flex flex-none rounded-full bg-white-light/40 p-2 hover:bg-white-light/90 hover:text-primary ltr:ml-2 rtl:mr-2 dark:bg-dark/40 dark:text-[#d0d2d6] dark:hover:bg-dark/60 dark:hover:text-primary lg:hidden"
                @click="$store.app.toggleSidebar()">
                <svg width="20" height="20" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M20 7L4 7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                  <path opacity="0.5" d="M20 12L4 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round">
                  </path>
                  <path d="M20 17L4 17" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                </svg>
              </a>
            </div>
            <div class="dropdown shrink-0" x-data="dropdown" @click.outside="open = false">
              <a href="javascript:;"
                class="block rounded-full bg-white-light/40 p-2 hover:bg-white-light/90 hover:text-primary dark:bg-dark/40 dark:hover:bg-dark/60"
                @click="toggle">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <circle opacity="0.5" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5"/>
                  <path d="M12 17V17.5V18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                  <path d="M12 6V6.5V7" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                  <path d="M15 9.5C15 8.11929 13.6569 7 12 7C10.3431 7 9 8.11929 9 9.5C9 10.8807 10.3431 12 12 12C13.6569 12 15 13.1193 15 14.5C15 15.8807 13.6569 17 12 17C10.3431 17 9 15.8807 9 14.5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
                  </svg>
              </a>
              <ul x-cloak="" x-show="open" x-transition="" x-transition.duration.300ms=""
                class="top-11 grid w-[280px] grid-cols-2 gap-y-2 !px-2 font-semibold text-dark currency-list">
                <% if (user.currency === "USD") { %>
                  <li data-currency="NGN">
                     <a href="javascript:;" class="hover:text-primary">
                       <span class="ltr:ml-3 rtl:mr-3">Naira (â‚¦)</span>
                     </a>
                   </li>
                   <% } else { %>
                     <li data-currency="USD">
                     <a href="javascript:;" class="hover:text-primary">
                       <span class="ltr:ml-3 rtl:mr-3">Dollar ($)</span>
                     </a>
                   </li>
                <% } %>

              </ul>
            </div>
            <div x-data="header"
              class="flex items-center space-x-1.5 ltr:ml-auto rtl:mr-auto rtl:space-x-reverse dark:text-[#d0d2d6] sm:flex-1 ltr:sm:ml-0 sm:rtl:mr-0 lg:space-x-2">
              <div class="sm:ltr:mr-auto sm:rtl:ml-auto" x-data="{ search: false }" @click.outside="search = false">
                
              </div>
              <div>
                <a href="javascript:;" x-cloak="" x-show="$store.app.theme === 'light'" href="javascript:;"
                  class="flex items-center rounded-full bg-white-light/40 p-2 hover:bg-white-light/90 hover:text-primary dark:bg-dark/40 dark:hover:bg-dark/60"
                  @click="$store.app.toggleTheme('dark')">
                  <svg width="20" height="20" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="1.5"></circle>
                    <path d="M12 2V4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                    <path d="M12 20V22" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                    <path d="M4 12L2 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                    <path d="M22 12L20 12" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                    <path opacity="0.5" d="M19.7778 4.22266L17.5558 6.25424" stroke="currentColor" stroke-width="1.5"
                      stroke-linecap="round"></path>
                    <path opacity="0.5" d="M4.22217 4.22266L6.44418 6.25424" stroke="currentColor" stroke-width="1.5"
                      stroke-linecap="round"></path>
                    <path opacity="0.5" d="M6.44434 17.5557L4.22211 19.7779" stroke="currentColor" stroke-width="1.5"
                      stroke-linecap="round"></path>
                    <path opacity="0.5" d="M19.7778 19.7773L17.5558 17.5551" stroke="currentColor" stroke-width="1.5"
                      stroke-linecap="round"></path>
                  </svg>
                </a>
                <a href="javascript:;" x-cloak="" x-show="$store.app.theme === 'dark'" href="javascript:;"
                  class="flex items-center rounded-full bg-white-light/40 p-2 hover:bg-white-light/90 hover:text-primary dark:bg-dark/40 dark:hover:bg-dark/60"
                  @click="$store.app.toggleTheme('system')">
                  <svg width="20" height="20" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M21.0672 11.8568L20.4253 11.469L21.0672 11.8568ZM12.1432 2.93276L11.7553 2.29085V2.29085L12.1432 2.93276ZM21.25 12C21.25 17.1086 17.1086 21.25 12 21.25V22.75C17.9371 22.75 22.75 17.9371 22.75 12H21.25ZM12 21.25C6.89137 21.25 2.75 17.1086 2.75 12H1.25C1.25 17.9371 6.06294 22.75 12 22.75V21.25ZM2.75 12C2.75 6.89137 6.89137 2.75 12 2.75V1.25C6.06294 1.25 1.25 6.06294 1.25 12H2.75ZM15.5 14.25C12.3244 14.25 9.75 11.6756 9.75 8.5H8.25C8.25 12.5041 11.4959 15.75 15.5 15.75V14.25ZM20.4253 11.469C19.4172 13.1373 17.5882 14.25 15.5 14.25V15.75C18.1349 15.75 20.4407 14.3439 21.7092 12.2447L20.4253 11.469ZM9.75 8.5C9.75 6.41182 10.8627 4.5828 12.531 3.57467L11.7553 2.29085C9.65609 3.5593 8.25 5.86509 8.25 8.5H9.75ZM12 2.75C11.9115 2.75 11.8077 2.71008 11.7324 2.63168C11.6686 2.56527 11.6538 2.50244 11.6503 2.47703C11.6461 2.44587 11.6482 2.35557 11.7553 2.29085L12.531 3.57467C13.0342 3.27065 13.196 2.71398 13.1368 2.27627C13.0754 1.82126 12.7166 1.25 12 1.25V2.75ZM21.7092 12.2447C21.6444 12.3518 21.5541 12.3539 21.523 12.3497C21.4976 12.3462 21.4347 12.3314 21.3683 12.2676C21.2899 12.1923 21.25 12.0885 21.25 12H22.75C22.75 11.2834 22.1787 10.9246 21.7237 10.8632C21.286 10.804 20.7293 10.9658 20.4253 11.469L21.7092 12.2447Z"
                      fill="currentColor"></path>
                  </svg>
                </a>
                <a href="javascript:;" x-cloak="" x-show="$store.app.theme === 'system'" href="javascript:;"
                  class="flex items-center rounded-full bg-white-light/40 p-2 hover:bg-white-light/90 hover:text-primary dark:bg-dark/40 dark:hover:bg-dark/60"
                  @click="$store.app.toggleTheme('light')">
                  <svg width="20" height="20" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M3 9C3 6.17157 3 4.75736 3.87868 3.87868C4.75736 3 6.17157 3 9 3H15C17.8284 3 19.2426 3 20.1213 3.87868C21 4.75736 21 6.17157 21 9V14C21 15.8856 21 16.8284 20.4142 17.4142C19.8284 18 18.8856 18 17 18H7C5.11438 18 4.17157 18 3.58579 17.4142C3 16.8284 3 15.8856 3 14V9Z"
                      stroke="currentColor" stroke-width="1.5"></path>
                    <path opacity="0.5" d="M22 21H2" stroke="currentColor" stroke-width="1.5" stroke-linecap="round">
                    </path>
                    <path opacity="0.5" d="M15 15H9" stroke="currentColor" stroke-width="1.5" stroke-linecap="round">
                    </path>
                  </svg>
                </a>
              </div>

              <div class="dropdown shrink-0" x-data="dropdown" @click.outside="open = false">
                <a href="javascript:;"
                  class="block rounded-full bg-white-light/40 p-2 hover:bg-white-light/90 hover:text-primary dark:bg-dark/40 dark:hover:bg-dark/60"
                  @click="toggle">
                  <img :src="`../assets/images/flags/${$store.app.locale.toUpperCase()}.svg`" alt="image"
                    class="h-5 w-5 rounded-full object-cover" />
                </a>
                <ul x-cloak="" x-show="open" x-transition="" x-transition.duration.300ms=""
                  class="top-11 grid w-[280px] grid-cols-2 gap-y-2 !px-2 font-semibold text-dark ltr:-right-14 rtl:-left-14 dark:text-white-dark dark:text-white-light/90 sm:ltr:-right-2 sm:rtl:-left-2">
                  <template x-for="item in languages">
                    <li>
                      <a href="javascript:;" class="hover:text-primary"
                        @click="$store.app.toggleLocale(item.value),toggle()"
                        :class="{'bg-primary/10 text-primary' : $store.app.locale == item.value}">
                        <img class="h-5 w-5 rounded-full object-cover"
                          :src="`../assets/images/flags/${item.value.toUpperCase()}.svg`" alt="image" />
                        <span class="ltr:ml-3 rtl:mr-3" x-text="item.key"></span>
                      </a>
                    </li>
                  </template>
                </ul>
              </div>
              <div class="dropdown" x-data="dropdown" @click.outside="open = false">
                <a href="javascript:;"
                  class="relative block rounded-full bg-white-light/40 p-2 hover:bg-white-light/90 hover:text-primary dark:bg-dark/40 dark:hover:bg-dark/60"
                  @click="toggle">
                  <svg width="20" height="20" viewbox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M19.0001 9.7041V9C19.0001 5.13401 15.8661 2 12.0001 2C8.13407 2 5.00006 5.13401 5.00006 9V9.7041C5.00006 10.5491 4.74995 11.3752 4.28123 12.0783L3.13263 13.8012C2.08349 15.3749 2.88442 17.5139 4.70913 18.0116C9.48258 19.3134 14.5175 19.3134 19.291 18.0116C21.1157 17.5139 21.9166 15.3749 20.8675 13.8012L19.7189 12.0783C19.2502 11.3752 19.0001 10.5491 19.0001 9.7041Z"
                      stroke="currentColor" stroke-width="1.5"></path>
                    <path d="M7.5 19C8.15503 20.7478 9.92246 22 12 22C14.0775 22 15.845 20.7478 16.5 19"
                      stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                    <path d="M12 6V10" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                  </svg>

                  <% if (notifications.length===0) { %>

                    <% } else { %>
                      <span class="absolute top-0 flex h-3 w-3 ltr:right-0 rtl:left-0">
                        <span
                          class="absolute -top-[3px] inline-flex h-full w-full animate-ping rounded-full bg-success/50 opacity-75 ltr:-left-[3px] rtl:-right-[3px]"></span>
                        <span class="relative inline-flex h-[6px] w-[6px] rounded-full bg-success"></span>
                      </span>
                      <% } %>


                </a>
                <ul x-cloak="" x-show="open" x-transition="" x-transition.duration.300ms="" id="notification-list"
                  class="top-11 w-[300px] divide-y !py-0 text-dark ltr:-right-2 rtl:-left-2 dark:divide-white/10 dark:text-white-dark sm:w-[350px]">
                  <li>
                    <div class="flex items-center justify-between px-4 py-2 font-semibold hover:!bg-transparent">
                      <h4 class="text-lg">Notification</h4>
                      <template x-if="notifications.length">
                        <span class="badge bg-primary/80">
                          <%= notifications.length %>New
                        </span>
                      </template>
                    </div>
                  </li>
                  <% notifications.forEach(function(notification) { %>
                    <li class="dark:text-white-light/90" data-id="<%= notification.id %>">
                      <div class="group flex items-center px-4 py-2" @click.self="toggle">
                        <div class="flex flex-auto ltr:pl-3 rtl:pr-3">
                          <div class="ltr:pr-3 rtl:pl-3">
                            <h6>
                              <%= notification.message %>
                            </h6>
                            <span class="block text-xs font-normal dark:text-gray-500">
                              <%= timeSince(notification.timestamp) %>
                            </span>
                          </div>
                          <button type="button"
                            class="text-neutral-300 opacity-0 hover:text-danger group-hover:opacity-100 ltr:ml-auto rtl:mr-auto mark-as-read"
                            data-id="<%= notification.id %>">
                            <svg width="20" height="20" viewbox="0 0 24 24" fill="none"
                              xmlns="http://www.w3.org/2000/svg">
                              <circle opacity="0.5" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5">
                              </circle>
                              <path d="M14.5 9.50002L9.5 14.5M9.49998 9.5L14.5 14.5" stroke="currentColor"
                                stroke-width="1.5" stroke-linecap="round"></path>
                            </svg>
                          </button>
                        </div>
                      </div>
                    </li>
                    <% }); %>
                      <li>
                        <div class="p-4">
                          <button
                            class="<%= notifications.length === 0 ? 'hidden' : 'block' %> btn btn-primary btn-small w-full"
                            @click="toggle">
                            Read All Notifications
                          </button>
                        </div>
                      </li>
                      <template x-if="!notifications.length">
                        <li>
                          <div class="!grid min-h-[200px] place-content-center text-lg hover:!bg-transparent">
                            <div class="mx-auto mb-4 rounded-full text-primary ring-4 ring-primary/30">
                              <svg width="40" height="40" viewbox="0 0 20 20" fill="none"
                                xmlns="http://www.w3.org/2000/svg">
                                <path opacity="0.5"
                                  d="M20 10C20 4.47715 15.5228 0 10 0C4.47715 0 0 4.47715 0 10C0 15.5228 4.47715 20 10 20C15.5228 20 20 15.5228 20 10Z"
                                  fill="currentColor"></path>
                                <path
                                  d="M10 4.25C10.4142 4.25 10.75 4.58579 10.75 5V11C10.75 11.4142 10.4142 11.75 10 11.75C9.58579 11.75 9.25 11.4142 9.25 11V5C9.25 4.58579 9.58579 4.25 10 4.25Z"
                                  fill="currentColor"></path>
                                <path
                                  d="M10 15C10.5523 15 11 14.5523 11 14C11 13.4477 10.5523 13 10 13C9.44772 13 9 13.4477 9 14C9 14.5523 9.44772 15 10 15Z"
                                  fill="currentColor"></path>
                              </svg>
                            </div>
                            No data available.
                          </div>
                        </li>
                      </template>
                </ul>
              </div>
              <div class="dropdown flex-shrink-0" x-data="dropdown" @click.outside="open = false">
                <a href="javascript:;" class="group relative" @click="toggle()">
                  <% if (user.profile_picture) { %>
                    <span><img class="h-9 w-9 rounded-full object-cover saturate-50 group-hover:saturate-100"
                        src="<%= user.profile_picture %>" alt="image" /></span>
                    <% } else { %>
                      <span><img class="h-9 w-9 rounded-full object-cover saturate-50 group-hover:saturate-100"
                          src="../assets/images/user-profile.jpeg" alt="image" /></span>
                      <% } %>
                </a>
                <ul x-cloak="" x-show="open" x-transition="" x-transition.duration.300ms=""
                  class="top-11 w-[230px] !py-0 font-semibold text-dark ltr:right-0 rtl:left-0 dark:text-white-dark dark:text-white-light/90">
                  <li>
                    <div class="flex items-center px-4 py-4">

                      <div class="truncate ltr:pl-4 rtl:pr-4">
                        <h4 class="text-base">
                          <%= user.firstname %>
                            <%= user.lastname %><span
                                class="rounded bg-success-light px-1 text-xs text-success ltr:ml-2 rtl:ml-2">User</span>
                        </h4>
                        <a class="text-black/60 hover:text-primary dark:text-dark-light/60 dark:hover:text-white"
                          href="javascript:;">
                          <%= user.email %>
                        </a>
                      </div>
                    </div>
                  </li>
                  <li>
                    <a href="/profile" class="dark:hover:text-white" @click="toggle">
                      <svg class="h-4.5 w-4.5 shrink-0 ltr:mr-2 rtl:ml-2" width="18" height="18" viewbox="0 0 24 24"
                        fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="6" r="4" stroke="currentColor" stroke-width="1.5"></circle>
                        <path opacity="0.5"
                          d="M20 17.5C20 19.9853 20 22 12 22C4 22 4 19.9853 4 17.5C4 15.0147 7.58172 13 12 13C16.4183 13 20 15.0147 20 17.5Z"
                          stroke="currentColor" stroke-width="1.5"></path>
                      </svg>
                      Profile</a>
                  </li>
                  <li>
                    <a href="/settings" class="dark:hover:text-white" @click="toggle">
                      <svg class="h-4.5 w-4.5 shrink-0 ltr:mr-2 rtl:ml-2" width="18" height="18" viewbox="0 0 24 24"
                        fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="12" r="3" stroke="black" stroke-width="1.5" />
                        <path opacity="0.5"
                          d="M13.7654 2.15224C13.3978 2 12.9319 2 12 2C11.0681 2 10.6022 2 10.2346 2.15224C9.74457 2.35523 9.35522 2.74458 9.15223 3.23463C9.05957 3.45834 9.0233 3.7185 9.00911 4.09799C8.98826 4.65568 8.70226 5.17189 8.21894 5.45093C7.73564 5.72996 7.14559 5.71954 6.65219 5.45876C6.31645 5.2813 6.07301 5.18262 5.83294 5.15102C5.30704 5.08178 4.77518 5.22429 4.35436 5.5472C4.03874 5.78938 3.80577 6.1929 3.33983 6.99993C2.87389 7.80697 2.64092 8.21048 2.58899 8.60491C2.51976 9.1308 2.66227 9.66266 2.98518 10.0835C3.13256 10.2756 3.3397 10.437 3.66119 10.639C4.1338 10.936 4.43789 11.4419 4.43786 12C4.43783 12.5581 4.13375 13.0639 3.66118 13.3608C3.33965 13.5629 3.13248 13.7244 2.98508 13.9165C2.66217 14.3373 2.51966 14.8691 2.5889 15.395C2.64082 15.7894 2.87379 16.193 3.33973 17C3.80568 17.807 4.03865 18.2106 4.35426 18.4527C4.77508 18.7756 5.30694 18.9181 5.83284 18.8489C6.07289 18.8173 6.31632 18.7186 6.65204 18.5412C7.14547 18.2804 7.73556 18.27 8.2189 18.549C8.70224 18.8281 8.98826 19.3443 9.00911 19.9021C9.02331 20.2815 9.05957 20.5417 9.15223 20.7654C9.35522 21.2554 9.74457 21.6448 10.2346 21.8478C10.6022 22 11.0681 22 12 22C12.9319 22 13.3978 22 13.7654 21.8478C14.2554 21.6448 14.6448 21.2554 14.8477 20.7654C14.9404 20.5417 14.9767 20.2815 14.9909 19.902C15.0117 19.3443 15.2977 18.8281 15.781 18.549C16.2643 18.2699 16.8544 18.2804 17.3479 18.5412C17.6836 18.7186 17.927 18.8172 18.167 18.8488C18.6929 18.9181 19.2248 18.7756 19.6456 18.4527C19.9612 18.2105 20.1942 17.807 20.6601 16.9999C21.1261 16.1929 21.3591 15.7894 21.411 15.395C21.4802 14.8691 21.3377 14.3372 21.0148 13.9164C20.8674 13.7243 20.6602 13.5628 20.3387 13.3608C19.8662 13.0639 19.5621 12.558 19.5621 11.9999C19.5621 11.4418 19.8662 10.9361 20.3387 10.6392C20.6603 10.4371 20.8675 10.2757 21.0149 10.0835C21.3378 9.66273 21.4803 9.13087 21.4111 8.60497C21.3592 8.21055 21.1262 7.80703 20.6602 7C20.1943 6.19297 19.9613 5.78945 19.6457 5.54727C19.2249 5.22436 18.693 5.08185 18.1671 5.15109C17.9271 5.18269 17.6837 5.28136 17.3479 5.4588C16.8545 5.71959 16.2644 5.73002 15.7811 5.45096C15.2977 5.17191 15.0117 4.65566 14.9909 4.09794C14.9767 3.71848 14.9404 3.45833 14.8477 3.23463C14.6448 2.74458 14.2554 2.35523 13.7654 2.15224Z"
                          stroke="currentColor" stroke-width="1.5" />
                      </svg>
                      Settings</a>
                  </li>
                  <li>
                    <a href="" class="dark:hover:text-white" @click="toggle">
                      <svg class="h-4.5 w-4.5 shrink-0 ltr:mr-2 rtl:ml-2" width="18" height="18" viewbox="0 0 24 24"
                        fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path
                          d="M2 16C2 13.1716 2 11.7574 2.87868 10.8787C3.75736 10 5.17157 10 8 10H16C18.8284 10 20.2426 10 21.1213 10.8787C22 11.7574 22 13.1716 22 16C22 18.8284 22 20.2426 21.1213 21.1213C20.2426 22 18.8284 22 16 22H8C5.17157 22 3.75736 22 2.87868 21.1213C2 20.2426 2 18.8284 2 16Z"
                          stroke="currentColor" stroke-width="1.5"></path>
                        <path opacity="0.5" d="M6 10V8C6 4.68629 8.68629 2 12 2C15.3137 2 18 4.68629 18 8V10"
                          stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                        <g opacity="0.5">
                          <path
                            d="M9 16C9 16.5523 8.55228 17 8 17C7.44772 17 7 16.5523 7 16C7 15.4477 7.44772 15 8 15C8.55228 15 9 15.4477 9 16Z"
                            fill="currentColor"></path>
                          <path
                            d="M13 16C13 16.5523 12.5523 17 12 17C11.4477 17 11 16.5523 11 16C11 15.4477 11.4477 15 12 15C12.5523 15 13 15.4477 13 16Z"
                            fill="currentColor"></path>
                          <path
                            d="M17 16C17 16.5523 16.5523 17 16 17C15.4477 17 15 16.5523 15 16C15 15.4477 15.4477 15 16 15C16.5523 15 17 15.4477 17 16Z"
                            fill="currentColor"></path>
                        </g>
                      </svg>
                      Lock Screen</a>
                  </li>
                  <li class="border-t border-white-light dark:border-white-light/10">
                    <a href="logout" class="!py-3 text-danger" @click="toggle">
                      <svg class="h-4.5 w-4.5 rotate-90 ltr:mr-2 rtl:ml-2" width="18" height="18" viewbox="0 0 24 24"
                        fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path opacity="0.5"
                          d="M17 9.00195C19.175 9.01406 20.3529 9.11051 21.1213 9.8789C22 10.7576 22 12.1718 22 15.0002V16.0002C22 18.8286 22 20.2429 21.1213 21.1215C20.2426 22.0002 18.8284 22.0002 16 22.0002H8C5.17157 22.0002 3.75736 22.0002 2.87868 21.1215C2 20.2429 2 18.8286 2 16.0002L2 15.0002C2 12.1718 2 10.7576 2.87868 9.87889C3.64706 9.11051 4.82497 9.01406 7 9.00195"
                          stroke="currentColor" stroke-width="1.5" stroke-linecap="round"></path>
                        <path d="M12 15L12 2M12 2L15 5.5M12 2L9 5.5" stroke="currentColor" stroke-width="1.5"
                          stroke-linecap="round" stroke-linejoin="round"></path>
                      </svg>
                      Sign Out
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>

          <!-- horizontal menu -->

        </div>
      </header>
      <!-- end header section -->

      <div class="animate__animated p-6" :class="[$store.app.animation]">

        <!-- start main content section -->

        <div>
          <div class="">
            <div>
              <div class="panel mb-5">
                <h5 class="text-lg font-semibold dark:text-white-light">Order SMS</h5>
                <hr>
                <h5 class="mt-1 mb-5 pt-3">Order your SMS here, then have a look at your pending SMS to see your current
                  order. If the service is not listed, feel free to contact support or use the "Not Listed" service.
                  Looking to buy in bulk and think the price is a bit too steep? Feel free to open a ticket for possible
                  bulk discounts! Keep in mind that these are temporary SMS and are usually used for one-time
                  verifications.</h5>
                <small> <span style="color: red;">Important Requirement </span>:
                  <ul style="list-style: circle; padding-left: 15px;">
                    <li>
                      Please use the regular WhatsApp if you are having issues receiving the verification code on
                      Business WhatsApp.
                    </li>
                    <li>
                      We recommend setting up two-step verification on WhatsApp or another app for any numbers purchased
                      from us.
                    </li>
                  </ul>

                </small>
                <form id="orderForm" action="/ordersms" method="post">
                  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                    <div class="mt-4">
                      <div>
                        <label for="country-select">Country</label>
                        <select id="country-select" name="country">
                          <% countries.forEach((country, index)=> { %>
                            <option value="<%= country.ID %>" <%=index===0 ? 'selected' : '' %>>
                              <%= country.name %>
                            </option>
                            <% }) %>
                        </select>
                      </div>
                    </div>
                    <div class="mt-4">
                      <div>
                        <label for="service-select">Service</label>
                        <select id="service-select" name="service">
                          <% services.forEach((service, index)=> { %>
                            <option value="<%= service.ID %>" <%=index===0 ? 'selected' : '' %>>
                              <%= service.name %>
                            </option>
                            <% }) %>
                        </select>
                      </div>
                    </div>
                    <div class="mt-4">
                      <div>
                        <label for="shipping-charge">Quantity </label>
                        <input id="displayquantity" disabled type="number" class="form-input" value="1">
                      </div>
                    </div>
                    <div class="mt-4">
                      <div>
                        <label for="stock">Stock</label>
                        <input id="stock" disabled type="text" class="form-input" value="">
                      </div>
                    </div>
                    <div class="mt-4" hidden>
                      <div>
                        <label for="charge">Price range</label>
                        <input id="quantity" type="number" name="quantity" class="form-input" value="1" required>
                      </div>
                    </div>
                    <div class="mt-4">
                      <div>
                        <label for="shipping-charge">Pricing option </label>
                        <select name="pricing_option" id="pricing_option" class="form-select">
                          <option value="1">Select highest success rate</option>
                          <option value="0">Select cheapest rate</option>
                        </select>
                      </div>
                    </div>
                    <div class="mt-4">
                      <div>
                        <label for="charge">Price range</label>
                        <input id="displaycharge" disabled type="text" class="form-input" required>
                      </div>
                    </div>
                    <div class="mt-4" hidden>
                      <div>
                        <label for="charge">Price range</label>
                        <input id="displaycharge1" type="number" name="displaycharge1" class="form-input">
                      </div>
                    </div>
                    <div class="mt-4" hidden>
                      <div>
                        <label for="charge">Price range</label>
                        <input name="pool" id="pools" type="number" class="form-input" required>
                      </div>
                    </div>
                  </div>
                  <div class="mt-4">
                    <input id="charge" type="hidden" name="charge" class="form-input">
                    <p>This is the price range, for a guaranteed price feel free to use the advanced view to select a
                      pool to get a more specific price.</p>
                    <div class="mb-3 mt-2 sm:mb-0 flex justify-between">
                      <button type="submit" id="purchaseBTN" class="btn btn-primary">Purchase</button>
                      <button type="button" id="advancedBTN" class="btn btn-primary"
                        onclick="toggleVisibility()">Advanced view</button>
                    </div>
                  </div>
                </form>
                <!-- advance view -->
                <div id="toggleDiv" style="display: none;" class="mt-8">
                  <h3 style="display: block;">View our advanced view, which shows success rate, pricing and all the
                    information you need!</h3>

                  <div class="grid grid-cols-1 gap-6 pt-5 xl:grid-cols-3" id="stockDisplay">

                  </div>

                  <!-- advance view end -->
                </div>
              </div>
              <div>
              </div>
            </div>
            <div id="alertBox"
              class="flex items-center rounded bg-primary-light p-3.5 text-primary dark:bg-primary-dark-light mb-3"
              style="display: none;">
              <span class="ltr:pr-2 rtl:pl-2" id="alertContent"></span>
              <button id="alertDismiss" type="button" class="hover:opacity-80 ltr:ml-auto rtl:mr-auto">
                <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewbox="0 0 24 24" fill="none"
                  stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"
                  class="h-5 w-5">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </button>
            </div>
            <div class="panel table-responsive">
              <h5 class="text-lg font-semibold dark:text-white-light mb-4">Pending SMS</h5>
              <table id="phoneNumbersTable">
                <thead>
                  <tr>
                    <th>Phone Number</th>
                    <th>
                      <button type="button" x-tooltip="In order to view the full code, click on any of the codes"
                        data-placement="top" role="tooltip">
                        Code
                      </button>
                    </th>
                    <th>Country</th>
                    <th>Service</th>
                    <th class="text-center">status</th>
                    <th class="text-center">Actions</th>
                  </tr>
                </thead>
                <tbody>

                </tbody>
              </table>
            </div>

            <!-- end main content section -->
          </div>
        </div>
        <!-- start footer section -->
        <div class="p-6 pt-0 mt-auto text-center dark:text-white-dark ltr:sm:text-left rtl:sm:text-right">
          Â© <span id="footer-year">2022</span>.
        </div>
        <!-- end footer section -->

      </div>
      <% if (messages.error) { %>
        <div id="error-message">
          <%= messages.error %>
        </div>
        <% } %>
          <% if (messages.success) { %>
            <div id="success-message">
              <%= messages.success %>
            </div>
            <% } %>

              <script src="https://cdn.jsdelivr.net/npm/nice-select2/dist/js/nice-select2.min.js" defer></script>
              <script src="assets/js/alpine-collaspe.min.js"></script>
              <script src="assets/js/alpine-persist.min.js"></script>
              <script defer="" src="assets/js/alpine-ui.min.js"></script>
              <script defer="" src="assets/js/alpine-focus.min.js"></script>
              <script defer="" src="assets/js/alpine.min.js"></script>
              <script src="assets/js/custom.js"></script>
              <script defer="" src="assets/js/apexcharts.js"></script>
              <script src="https://code.jquery.com/jquery-3.7.1.js"></script>
              <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
              <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
              <script src="../assets/js/notification.js"></script>
              <script src="../assets/js/userCurrency.js"></script>

              <script>
                $(function () {
                  var errorMessage = $('#error-message').text();
                  var successMessage = $('#success-message').text();

                  if (errorMessage) {
                    toastr.error(errorMessage);
                  }

                  if (successMessage) {
                    toastr.success(successMessage);
                  }
                });
              </script>

              <script>
                const alertDismiss = document.getElementById('alertDismiss');

                alertDismiss.addEventListener('click', () => {
                  alertBox.style.display = 'none';
                });

                function toggleVisibility() {

                  var div = document.getElementById("toggleDiv");

                  if (div.style.display === "none" || div.style.display === "") {
                    div.style.display = "grid";
                  } else {
                    div.style.display = "none";
                  }
                }
              </script>

              <script>
                document.getElementById('orderForm').addEventListener('submit', async function (event) {
                  event.preventDefault();

                  const purchaseButton = document.getElementById('purchaseBTN');
                  purchaseButton.disabled = true;
                  purchaseButton.textContent = 'Processing...';


                  try {
                    const response = await fetch('/ordersms', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        country: document.getElementById('country-select').value,
                        service: document.getElementById('service-select').value,
                        quantity: document.getElementById('quantity').value,
                        pool: document.getElementById('pools').value,
                        displaycharge1: document.getElementById('displaycharge1').value,
                        charge: document.getElementById('charge').value,
                        pricing_option: document.getElementById('pricing_option').value,
                      })
                    });

                    const result = await response.json();

                    if (response.ok) {
                      toastr.success(result.message || 'Purchase successful', 'Success');

                      setTimeout(() => {
                        window.location.reload();
                      }, 1000);
                    } else {
                      toastr.error(result.error || 'An error occurred', 'Error');
                    }
                  } catch (error) {
                    toastr.error('A network error occurred, please try again later.', 'Network Error');
                  } finally {
                    purchaseButton.disabled = false;
                    purchaseButton.textContent = 'Purchase';
                  }
                });
              </script>

              <script>
                document.addEventListener("DOMContentLoaded", () => {
                  const alertBox = document.getElementById('alertBox');
                  const alertContent = document.getElementById('alertContent');
                  const purchaseBTN = document.getElementById('purchaseBTN');

                  const socket = io();


                  socket.on('orderStatusUpdated', (data) => {
                    const { order_code, cc, number, code, short_name, service, status, time_left } = data;
                    updateTable(order_code, cc, number, code, short_name, service, status, time_left);
                  });

                  const fetchOrders = () => {
                    fetch('/sms/check')
                      .then(response => response.json())
                      .then(data => {
                        const { filteredOrders } = data;
                        populateTable('#phoneNumbersTable tbody', filteredOrders);
                      })
                      .catch(error => console.error('Error fetching data:', error));
                  };

                  function populateTable(selector, data) {
                    const tableBody = document.querySelector(selector);
                    tableBody.innerHTML = '';
                    data.forEach(item => {
                      const row = document.createElement('tr');
                      row.dataset.orderCode = item.order_code;
                      row.innerHTML = `
           <td>+${item.cc} ${item.number}</td>
           <td class="code" style="cursor: pointer;">
               ${item.status === 'pending' ? getSvgLoader() : (item.status === "completed" ? item.code : item.code)}
            </td>
           <td>${item.short_name}</td>
           <td>${item.service}</td>
           <td class="status"><span class="${item.status === 'pending' ? "badge badge-outline-warning" : (item.status === 'expired' ? "badge badge-outline-danger" : "badge badge-outline-success")}">
            ${item.status === 'pending' ? `Awaiting code(${item.time_left})` : `${item.status}`}</span></td>
           <td class="action">
            ${item.status === 'pending' ? getRefundButton(item.order_code)
                          : (item.status === 'expired' && item.cost !== 0.00 ? getRefundButton(item.order_code)
                            : getResendButton(item.order_code))}
             </td>
           
      `;
                      tableBody.appendChild(row);
                    });
                    document.querySelectorAll('.code').forEach(cell => {
                      cell.addEventListener('click', (event) => {
                        const orderCode = event.currentTarget.closest('tr').dataset.orderCode;
                        const item = data.find(order => order.order_code === orderCode);
                        showFullCode(item.full_code);
                      });
                    });
                  }


                  const updateTable = (order_code, cc, number, code, short_name, service, status, time_left) => {
                    const row = document.querySelector(`[data-order-code="${order_code}"]`);
                    if (row) {
                      row.querySelector('.code').innerHTML = status === 'pending' ? getSvgLoader() : code;
                      row.querySelector('.status').innerHTML = `<span class="${status === 'pending' ? "badge badge-outline-warning" : (status === 'expired' ? "badge badge-outline-danger" : "badge badge-outline-success")}">
${status === 'pending' ? `Awaiting code(${time_left})` : status}</span>`;
                      row.querySelector('.action').innerHTML = status === 'pending' ? getRefundButton(order_code) : getResendButton(order_code);
                    }
                  };


                  document.addEventListener('click', async (event) => {
                    if (event.target.closest('.refund-button')) {
                      const refundButton = event.target.closest('.refund-button')

                      const orderId = refundButton.getAttribute('data-order-id');

                      refundButton.disabled = true;


                      if (confirm('Are you sure you want to cancel and refund this order?')) {
                        try {
                          const response = await fetch('/sms/cancel', {
                            method: 'POST',
                            headers: {
                              'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ orderId })
                          });
                          const result = await response.json();

                          if (result.success === true) {
                            location.reload();
                            toastr.success(`The order has been cancelled, and you have been refunded`);

                          } else {
                            toastr.error(`Refund failed: ${result.message}`);
                          }
                        } catch (error) {
                          console.error('Error processing refund:', error);
                          alert('Error processing refund');
                        } finally {
                          setTimeout(() => {
                            refundButton.disabled = false;
                          }, 60000);
                        }
                      } else {
                        refundButton.disabled = false;
                      }
                    }
                  });


                  document.addEventListener('click', async (event) => {
                    if (event.target.closest('.resend-button')) {
                      const button = event.target.closest('.resend-button')

                      const orderId = button.getAttribute('data-order-id');

                      button.disabled = true;

                      if (confirm('Are you sure you would like to resend this order??')) {
                        try {
                          const response = await fetch('/sms/resend', {
                            method: 'POST',
                            headers: {
                              'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ orderId })
                          });
                          const result = await response.json();

                          if (result.success === true) {
                            location.reload();
                            toastr.success(`Refund success: ${result.message}`);
                          } else {
                            toastr.error(`Refund failed: ${result.message}`);
                          }
                        } catch (error) {
                          toastr.error('Error processing refund');
                        } finally {
                          setTimeout(() => {
                            button.disabled = false;
                          }, 60000);
                        }
                      } else {
                        button.disabled = false;
                      }
                    }
                  });

                  function getSvgLoader() {
                    return `
       <svg viewbox="0 0 24 24" width="24" height="24" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round" class="inline-block h-5 w-5 shrink-0 animate-[spin_2s_linear_infinite] align-middle ltr:mr-2 rtl:ml-2">
          <line x1="12" y1="2" x2="12" y2="6"></line>
          <line x1="12" y1="18" x2="12" y2="22"></line>
          <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
          <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
          <line x1="2" y1="12" x2="6" y2="12"></line>
          <line x1="18" y1="12" x2="22" y2="12"></line>
           <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
           <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
        </svg>
    `;
                  }

                  function getRefundButton(orderId) {
                    return `
                      <button id="refundBTN" type="button" class="refund-button" data-order-id="${orderId}">
                        <span class="flex items-center"> Refund
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path opacity="0.5" d="M18.6667 12C20.5513 11.7213 22 10.0457 22 8.02036C22 5.79998 20.2589 4 18.1111 4H5.88889C3.74112 4 2 5.79998 2 8.02036C2 10.0457 3.44873 11.7213 5.33333 12" stroke="black" stroke-width="1.5"/>
                          <path d="M12 7V14M12 14L14 11.6667M12 14L10 11.6667" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                          <path d="M5 11C5 9.11438 5 8.17157 5.58579 7.58579C6.17157 7 7.11438 7 9 7H15C16.8856 7 17.8284 7 18.4142 7.58579C19 8.17157 19 9.11438 19 11V17C19 18.8856 19 19.8284 18.4142 20.4142C17.8284 21 16.8856 21 15 21H9C7.11438 21 6.17157 21 5.58579 20.4142C5 19.8284 5 18.8856 5 17V11Z" stroke="currentColor" stroke-width="1.5"/>
                          <path opacity="0.5" d="M5 18H19" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                          </svg>
                          </span>
                      </button>
                  `;
                  }

                  function getResendButton(orderId) {
                    return `
        <button type="button" class="resend-button" data-order-id="${orderId}">
            <span class="flex items-center"> Resend
               <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                 <path fill-rule="evenodd" clip-rule="evenodd" d="M3.46447 3.46447C2 4.92893 2 7.28595 2 12C2 16.714 2 19.0711 3.46447 20.5355C4.92893 22 7.28595 22 12 22C16.714 22 19.0711 22 20.5355 20.5355C22 19.0711 22 16.714 22 12C22 7.28595 22 4.92893 20.5355 3.46447C19.0711 2 16.714 2 12 2C7.28595 2 4.92893 2 3.46447 3.46447ZM17 14.75C17.4142 14.75 17.75 15.0858 17.75 15.5C17.75 15.9142 17.4142 16.25 17 16.25H12.0715L13.4801 17.4238C13.7983 17.689 13.8413 18.1619 13.5762 18.4801C13.311 18.7983 12.8381 18.8413 12.5199 18.5762L9.51986 16.0762C9.34887 15.9337 9.25 15.7226 9.25 15.5C9.25 15.2774 9.34887 15.0663 9.51986 14.9238L12.5199 12.4238C12.8381 12.1587 13.311 12.2017 13.5762 12.5199C13.8413 12.8381 13.7983 13.311 13.4801 13.5762L12.0715 14.75H17ZM17.75 8.5C17.75 8.08579 17.4142 7.75 17 7.75H12.0715L13.4801 6.57617C13.7983 6.31099 13.8413 5.83807 13.5762 5.51986C13.311 5.20165 12.8381 5.15866 12.5199 5.42383L9.51986 7.92383C9.34887 8.06633 9.25 8.27741 9.25 8.5C9.25 8.72258 9.34887 8.93367 9.51986 9.07617L12.5199 11.5762C12.8381 11.8413 13.311 11.7983 13.5762 11.4801C13.8413 11.1619 13.7983 10.689 13.4801 10.4238L12.0715 9.25H17C17.4142 9.25 17.75 8.91421 17.75 8.5ZM7.75 6C7.75 5.58579 7.41421 5.25 7 5.25C6.58579 5.25 6.25 5.58579 6.25 6V18C6.25 18.4142 6.58579 18.75 7 18.75C7.41421 18.75 7.75 18.4142 7.75 18V6Z" fill="currentColor"/>
               </svg>
            </span>
        </button>
    `;
                  }

                  fetchOrders();

                  setInterval(fetchOrders, 30000);


                  const showFullCode = (fullCode) => {
                    alertContent.textContent = fullCode || 'No code available';
                    alertBox.style.display = 'flex';
                  };


                  const select1 = document.getElementById('country-select');
                  const select2 = document.getElementById('service-select');
                  const priceInput = document.getElementById('charge');
                  const displaycharge = document.getElementById('displaycharge');
                  const displaycharge1 = document.getElementById('displaycharge1');
                  const stock = document.getElementById('stock');
                  const pools = document.getElementById('pools');

                  // Suppress console logs temporarily
                  const originalConsoleLog = console.log;
                  console.log = function () { };

                  NiceSelect.bind((select1), { searchable: true });
                  NiceSelect.bind((select2), { searchable: true });

                  const debounce = (func, delay) => {
                    let timeout;
                    return (...args) => {
                      clearTimeout(timeout);
                      timeout = setTimeout(() => func(...args), delay);
                    };
                  };

                  const fetchData = async (country, service) => {
                    try {
                      const [priceResponse, stockResponse] = await Promise.all([
                        fetch('/smmpool/retrieve_prices', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ country, service }),
                        }),
                        fetch('/sms/all_stock', {
                          method: 'POST',
                          headers: { 'Content-Type': 'application/json' },
                          body: JSON.stringify({ country, service }),
                        }),
                      ]);

                      if (!priceResponse.ok || !stockResponse.ok) {
                        throw new Error('Failed to fetch data');
                      }

                      const priceData = await priceResponse.json();
                      const stockData = await stockResponse.json();

                      return { priceData, stockData };
                    } catch (error) {
                      console.error('Error fetching data:', error);
                      return null;
                    }
                  };

                  const updateUI = async () => {
                    const country = select1.value;
                    const service = select2.value;

                    const data = await fetchData(country, service);
                    if (!data) return;

                    const { priceData, stockData } = data;

                    let exchangeRate = 1500;
                    let smsprice = 1000;
                    let exchangeRateApi = 1500;
                    let userCurrency = 'NGN';

                    try {
                      const [rateResponse, smsPriceResponse, getUserResponses] = await Promise.all([
                        fetch('/api/exchange-rate'),
                        fetch('/api/sms-price'),
                        fetch('/api/api/exchange-rate'),
                      ]);

                      if (rateResponse.ok) {
                        const rateData = await rateResponse.json();
                        exchangeRate = rateData.rate || exchangeRate;
                      }

                      if (smsPriceResponse.ok) {
                        const smsPriceData = await smsPriceResponse.json();
                        smsprice = Number(smsPriceData.smsprice) || smsprice;
                      }

                      if (smsPriceResponse.ok) {
                        const userData = await getUserResponses.json();
                        exchangeRateApi = userData.rate.NGN;
                        userCurrency = userData.userDetails.currency;
                      }
                    } catch (error) {
                      console.warn('Error fetching exchange rate or SMS price:', error);
                    }

                    const minPrice = Math.floor(priceData.minPriceRange * exchangeRate + smsprice);
                    const maxPrice = Math.floor(priceData.maxPriceRange * exchangeRate + smsprice);
                    const convertedMinPrice = (minPrice / exchangeRateApi).toFixed(3)
                    const convertedMaxPrice = (maxPrice / exchangeRateApi).toFixed(3)

                    displaycharge.value = userCurrency === 'USD'
                      ? `$${convertedMinPrice} - $${convertedMaxPrice}`
                      : `â‚¦${minPrice} - â‚¦${maxPrice}`;

                    // Update cheapest pool price
                    const availablePools = priceData.pools?.filter(pool => parseFloat(pool.stock) > 0) || [];
                    if (availablePools.length > 0) {
                      const cheapestPool = availablePools.reduce((a, b) =>
                        parseFloat(a.price) < parseFloat(b.price) ? a : b
                      );

                      const cheapestPrice = Math.floor(parseFloat(cheapestPool.price) * exchangeRate + smsprice);

                      displaycharge1.value = cheapestPrice;
                      pools.value = cheapestPool.pool;
                      priceInput.value = cheapestPool.price;
                    } else {
                      displaycharge1.value = 'No pools available';
                    }

                    // Update stock
                    const totalStock = Array.isArray(stockData)
                      ? stockData.reduce((sum, item) => sum + (item.stock || 0), 0)
                      : 0;

                    stock.value = totalStock || '0';

                    const stockDisplay = document.getElementById('stockDisplay');
                    stockDisplay.innerHTML = '';

                    if (Array.isArray(stockData)) {
                      stockData.forEach(async item => {
                        const stockItem = document.createElement('div');
                        const itemPrice = Math.floor(item.price * exchangeRate + smsprice);
                        const displayPrice =
                          userCurrency === 'USD'
                            ? (itemPrice / exchangeRateApi).toFixed(3)
                            : itemPrice;

                        let sign = userCurrency === 'USD'
                          ? '$'
                          : 'â‚¦';

                        const uniqueAreaCodeContainerId = `areaCodesContainer-${item.pool_name}`;
                        const uniquePoolStocksContainerId = `poolStocksContainer-${item.pool_name}`;


                        stockItem.innerHTML = `
                         <div class="panel">
                        <div class="mb-5">
                            <form class="purchaseForm" id="purchaseForm-${item.pool_name}" action="/purchase/sms" method="post" class="space-y-5">
                                <div class="grid grid-cols-1 gap-5 md:grid-cols-2">
                                    <div>
                                        <label for="browserFname">Pool</label>
                                        <input id="disPool" type="text"
                                          class="form-input" disabled value="${item.pool_name}"/>
                                    </div>

                                    <div hidden>
                                        <input id="poolcountry" type="text"
                                            name="poolcountry" class="form-input" value="${item.country}" />

                                            <input id="poolcharge" type="text"
                                            name="charge" class="form-input" value="${item.price}" />

                                            <input id="poolservice" type="text"
                                            name="poolservice" class="form-input" value="${item.service}"/>

                                            <input id="pool" type="text"
                                            name="pool" class="form-input" value="${item.pool_name}"/>

                                            <input id="quantity" type="number"
                                            name="quantity" class="form-input" value="1"/>

                                            <input id="price" type="number" placeholder=""
                                        class="form-input" value="${Math.floor(item.price * exchangeRate + smsprice)}" name="displaycharge1"/>

                                    </div>
                                    <div>
                                        <label for="browserLname">Stock</label>
                                        <input id="success-rate" type="text" placeholder=""
                                            class="form-input" disabled value="${item.stock}" />
                                    </div>
                                    <div>
                                        <label for="browserEmail">Price</label>
                                        <input id="display-price" type="text" placeholder=""
                                        class="form-input" disabled value="${sign}${displayPrice.toLocaleString()}"/>
                                    </div>
                                    <div id="${uniquePoolStocksContainerId}">
                                    </div>
                                     <div id="${uniqueAreaCodeContainerId}">
                                    </div>
                                </div>
                                <button id="purchasePoolBTN" type="submit" class="btn btn-primary !mt-6">
                                    Purchase
                                </button>
                            </form>
                        </div>
                    </div>
                    `;
                        stockDisplay.appendChild(stockItem);

                        try {
                          const fetchDataPool = async (country, service, pool) => {
                            try {
                              const [areacodesResponse, poolStockResponse] = await Promise.all([
                                fetch('/request/areacodes', {
                                  method: 'POST',
                                  headers: { 'Content-Type': 'application/json' },
                                  body: JSON.stringify({ country, service, pool }),
                                }),
                                fetch('/pool/successRate', {
                                  method: 'POST',
                                  headers: { 'Content-Type': 'application/json' },
                                  body: JSON.stringify({ country, service, pool }),
                                }),
                              ]);

                              if (!areacodesResponse.ok || !poolStockResponse.ok) {
                                throw new Error('Failed to fetch data');
                              }

                              const areacodes = await areacodesResponse.json();
                              const poolStock = await poolStockResponse.json();

                              return { areacodes, poolStock };

                            } catch (error) {
                              console.error('Error fetching data:', error);
                              return null;
                            }
                          }

                          const fetchPooldata = await fetchDataPool(country, service, item.pool_name);
                          if (!fetchPooldata) return;

                          const { areacodes, poolStock } = fetchPooldata;

                          const areaCodesContainer = document.getElementById(uniqueAreaCodeContainerId);
                          const poolStocksContainer = document.getElementById(uniquePoolStocksContainerId);

                          if (poolStock && poolStock.success_rate !== undefined) {
                            poolStocksContainer.innerHTML = `
                            <label for="Stock">Success Rate</label>
                            <input id="pool-stock" type="text" placeholder="" 
                                  class="form-input" disabled value="${poolStock.success_rate || 'N/A'} %" />
                          `;
                          } else {
                            poolStocksContainer.innerHTML = '<p>No stock data available.</p>';
                          }

                          let areaCodes = [];

                          if (Array.isArray(areacodes)) {
                            areaCodes = areacodes;
                          } else if (typeof areacodes === 'object') {
                            if (areacodes.success === 0 && areacodes.message) {
                              areaCodesContainer.innerHTML = ``;
                              return;
                            } else if (Object.keys(areacodes).every((key) => !isNaN(key))) {
                              areaCodes = Object.values(areacodes);
                            }
                          }
                          if (areaCodes.length > 0) {
                            areaCodesContainer.innerHTML = `
                              <label for="areaCodes">Custom areacode</label>
                                <select id="areaCodes-${item.pool_name}" class="form-select text-white-dark">
                                  <option value="">none</option>
                                  ${areaCodes.map(code => `<option value="${code}">${code}</option>`).join('')}
                                </select>
                              `;
                          } else {
                            // Show message if no area codes are available
                            areaCodesContainer.innerHTML = ``;
                          }
                        } catch (error) {
                          console.error('Error during area codes API call:', error);
                          const areaCodesContainer = document.getElementById(uniqueAreaCodeContainerId);
                          areaCodesContainer.innerHTML = ``;
                        }
                      });
                    }

                    document.querySelectorAll('.purchaseForm').forEach((form) => {
                      form.addEventListener('submit', async function (event) {
                        event.preventDefault();

                        const purchasePoolBTN = form.querySelector('#purchasePoolBTN');
                        purchasePoolBTN.disabled = true;
                        purchasePoolBTN.textContent = 'Processing...';

                        try {

                          const areaCodeDropdown = form.querySelector(`#areaCodes-${form.querySelector('#pool').value}`);
                          const selectedAreaCode = areaCodeDropdown ? areaCodeDropdown.value : null;

                          if (selectedAreaCode === '') {
                            toastr.error('Please select an area code.', 'Error');
                            purchasePoolBTN.disabled = false;
                            purchasePoolBTN.textContent = 'Purchase';
                            return;
                          }

                          const formattedAreaCode = `[${selectedAreaCode}]`;

                          const response = await fetch('/purchase/sms', {
                            method: 'POST',
                            headers: {
                              'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                              poolcountry: form.querySelector('#poolcountry').value,
                              poolservice: form.querySelector('#poolservice').value,
                              quantity: form.querySelector('#quantity').value,
                              pool: form.querySelector('#pool').value,
                              displaycharge1: form.querySelector('#price').value,
                              charge: form.querySelector('#poolcharge').value,
                              areacode: formattedAreaCode,
                            })
                          });

                          const result = await response.json();

                          if (response.ok && result.message) {
                            toastr.success(result.message || 'Purchase successful', 'Success');
                            setTimeout(() => {
                              window.location.reload();
                            }, 1000);
                          } else {
                            toastr.error(result.error || 'An error occurred', 'Error');
                          }
                        } catch (error) {
                          toastr.error('A network error occurred, please try again later.', 'Network Error');
                        } finally {
                          purchasePoolBTN.disabled = false;
                          purchasePoolBTN.textContent = 'Purchase';
                        }
                      });
                    });
                  };


                  const handleSelectChange = debounce(updateUI, 300);

                  select1.addEventListener('change', handleSelectChange);
                  select2.addEventListener('change', handleSelectChange);

                  // Initial load
                  updateUI();
                });
              </script>

              <script>
                document.addEventListener('alpine:init', () => {
                  // main section
                  Alpine.data('scrollToTop', () => ({
                    showTopButton: false,
                    init() {
                      window.onscroll = () => {
                        this.scrollFunction();
                      };
                    },

                    scrollFunction() {
                      if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {
                        this.showTopButton = true;
                      } else {
                        this.showTopButton = false;
                      }
                    },

                    goToTop() {
                      document.body.scrollTop = 0;
                      document.documentElement.scrollTop = 0;
                    },
                  }));

                  // theme customization
                  Alpine.data('customizer', () => ({
                    showCustomizer: false,
                  }));

                  // sidebar section
                  Alpine.data('sidebar', () => ({
                    init() {
                      const selector = document.querySelector('.sidebar ul a[href="' + window.location.pathname + '"]');
                      if (selector) {
                        selector.classList.add('active');
                        const ul = selector.closest('ul.sub-menu');
                        if (ul) {
                          let ele = ul.closest('li.menu').querySelectorAll('.nav-link');
                          if (ele) {
                            ele = ele[0];
                            setTimeout(() => {
                              ele.click();
                            });
                          }
                        }
                      }
                    },
                  }));

                  // header section
                  Alpine.data('header', () => ({
                    init() {
                      const selector = document.querySelector('ul.horizontal-menu a[href="' + window.location.pathname + '"]');
                      if (selector) {
                        selector.classList.add('active');
                        const ul = selector.closest('ul.sub-menu');
                        if (ul) {
                          let ele = ul.closest('li.menu').querySelectorAll('.nav-link');
                          if (ele) {
                            ele = ele[0];
                            setTimeout(() => {
                              ele.classList.add('active');
                            });
                          }
                        }
                      }
                    },

                    notifications: [
                      {
                        id: 1,
                        profile: 'user-profile.jpeg',
                        message: '<strong class="text-sm mr-1">StarCode Kh</strong>invite you to <strong>Prototyping</strong>',
                        time: '45 min ago',
                      },
                      {
                        id: 2,
                        profile: 'profile-34.jpeg',
                        message: '<strong class="text-sm mr-1">Adam Nolan</strong>mentioned you to <strong>UX Basics</strong>',
                        time: '9h Ago',
                      },
                      {
                        id: 3,
                        profile: 'profile-16.jpeg',
                        message: '<strong class="text-sm mr-1">Anna Morgan</strong>Upload a file',
                        time: '9h Ago',
                      },
                    ],

                    messages: [
                      {
                        id: 1,
                        image: '<span class="grid place-content-center w-9 h-9 rounded-full bg-success-light dark:bg-success text-success dark:text-success-light"><svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg></span>',
                        title: 'Congratulations!',
                        message: 'Your OS has been updated.',
                        time: '1hr',
                      },
                      {
                        id: 2,
                        image: '<span class="grid place-content-center w-9 h-9 rounded-full bg-info-light dark:bg-info text-info dark:text-info-light"><svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg></span>',
                        title: 'Did you know?',
                        message: 'You can switch between artboards.',
                        time: '2hr',
                      },
                      {
                        id: 3,
                        image: '<span class="grid place-content-center w-9 h-9 rounded-full bg-danger-light dark:bg-danger text-danger dark:text-danger-light"><svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg></span>',
                        title: 'Something went wrong!',
                        message: 'Send Reposrt',
                        time: '2days',
                      },
                      {
                        id: 4,
                        image: '<span class="grid place-content-center w-9 h-9 rounded-full bg-warning-light dark:bg-warning text-warning dark:text-warning-light"><svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">    <circle cx="12" cy="12" r="10"></circle>    <line x1="12" y1="8" x2="12" y2="12"></line>    <line x1="12" y1="16" x2="12.01" y2="16"></line></svg></span>',
                        title: 'Warning',
                        message: 'Your password strength is low.',
                        time: '5days',
                      },
                    ],

                    languages: [
                      {
                        id: 1,
                        key: 'Khmer',
                        value: 'kh',
                      },
                      {
                        id: 2,
                        key: 'Danish',
                        value: 'da',
                      },
                      {
                        id: 3,
                        key: 'English',
                        value: 'en',
                      },
                      {
                        id: 4,
                        key: 'French',
                        value: 'fr',
                      },
                      {
                        id: 5,
                        key: 'German',
                        value: 'de',
                      },
                      {
                        id: 6,
                        key: 'Greek',
                        value: 'el',
                      },
                      {
                        id: 7,
                        key: 'Hungarian',
                        value: 'hu',
                      },
                      {
                        id: 8,
                        key: 'Italian',
                        value: 'it',
                      },
                      {
                        id: 9,
                        key: 'Japanese',
                        value: 'ja',
                      },
                      {
                        id: 10,
                        key: 'Polish',
                        value: 'pl',
                      },
                      {
                        id: 11,
                        key: 'Portuguese',
                        value: 'pt',
                      },
                      {
                        id: 12,
                        key: 'Russian',
                        value: 'ru',
                      },
                      {
                        id: 13,
                        key: 'Spanish',
                        value: 'es',
                      },
                      {
                        id: 14,
                        key: 'Swedish',
                        value: 'sv',
                      },
                      {
                        id: 15,
                        key: 'Turkish',
                        value: 'tr',
                      },
                      {
                        id: 16,
                        key: 'Arabic',
                        value: 'ae',
                      },
                    ],

                    removeNotification(value) {
                      this.notifications = this.notifications.filter((d) => d.id !== value);
                    },

                    removeMessage(value) {
                      this.messages = this.messages.filter((d) => d.id !== value);
                    },
                  }));

                  //invoice list
                  Alpine.data('invoiceList', () => ({
                    selectedRows: [],
                    items: [
                      {
                        id: 1,
                        invoice: '081451',
                        name: 'Laurie Fox',
                        email: 'lauriefox@company.com',
                        date: '15 Dec 2020',
                        amount: '2275.45',
                        status: 'Paid',
                        action: 1,
                      },
                      {
                        id: 2,
                        invoice: '081452',
                        name: 'Alexander Gray',
                        email: 'alexGray3188@gmail.com',
                        date: '20 Dec 2020',
                        amount: '1044.00',
                        status: 'Paid',
                        action: 2,
                      },
                      {
                        id: 3,
                        invoice: '081681',
                        name: 'James Taylor',
                        email: 'jamestaylor468@gmail.com',
                        date: '27 Dec 2020',
                        amount: '20.00',
                        status: 'Pending',
                        action: 3,
                      },
                      {
                        id: 4,
                        invoice: '082693',
                        name: 'Grace Roberts',
                        email: 'graceRoberts@company.com',
                        date: '31 Dec 2020',
                        amount: '344.00',
                        status: 'Paid',
                        action: 4,
                      },
                      {
                        id: 5,
                        invoice: '084743',
                        name: 'Donna Rogers',
                        email: 'donnaRogers@hotmail.com',
                        date: '03 Jan 2021',
                        amount: '405.15',
                        status: 'Paid',
                        action: 5,
                      },
                      {
                        id: 6,
                        invoice: '086643',
                        name: 'Amy Diaz',
                        email: 'amy968@gmail.com',
                        date: '14 Jan 2020',
                        amount: '100.00',
                        status: 'Paid',
                        action: 6,
                      },
                      {
                        id: 7,
                        invoice: '086773',
                        name: 'Nia Hillyer',
                        email: 'niahillyer666@comapny.com',
                        date: '20 Jan 2021',
                        amount: '59.21',
                        status: 'Pending',
                        action: 7,
                      },
                      {
                        id: 8,
                        invoice: '087916',
                        name: 'Mary McDonald',
                        email: 'maryDonald007@gamil.com',
                        date: '25 Jan 2021',
                        amount: '79.00',
                        status: 'Pending',
                        action: 8,
                      },
                      {
                        id: 9,
                        invoice: '089472',
                        name: 'Andy King',
                        email: 'kingandy07@company.com',
                        date: '28 Jan 2021',
                        amount: '149.00',
                        status: 'Paid',
                        action: 9,
                      },
                      {
                        id: 10,
                        invoice: '091768',
                        name: 'Vincent Carpenter',
                        email: 'vincentcarpenter@gmail.com',
                        date: '30 Jan 2021',
                        amount: '400',
                        status: 'Paid',
                        action: 10,
                      },
                      {
                        id: 11,
                        invoice: '095841',
                        name: 'Kelly Young',
                        email: 'youngkelly@hotmail.com',
                        date: '06 Feb 2021',
                        amount: '49.00',
                        status: 'Pending',
                        action: 11,
                      },
                      {
                        id: 12,
                        invoice: '098424',
                        name: 'Alma Clarke',
                        email: 'alma.clarke@gmail.com',
                        date: '10 Feb 2021',
                        amount: '234.40',
                        status: 'Paid',
                        action: 12,
                      },
                    ],
                    searchText: '',
                    datatable: null,
                    dataArr: [],



                    checkAllCheckbox() {
                      if (this.items.length && this.selectedRows.length === this.items.length) {
                        return true;
                      } else {
                        return false;
                      }
                    },

                    checkAll(isChecked) {
                      if (isChecked) {
                        this.selectedRows = this.items.map((d) => {
                          return d.id;
                        });
                      } else {
                        this.selectedRows = [];
                      }
                    },

                    setTableData() {
                      this.dataArr = [];
                      for (let i = 0; i < this.items.length; i++) {
                        this.dataArr[i] = [];
                        for (let p in this.items[i]) {
                          if (this.items[i].hasOwnProperty(p)) {
                            this.dataArr[i].push(this.items[i][p]);
                          }
                        }
                      }
                    },

                    searchInvoice() {
                      return this.items.filter(
                        (d) =>
                          (d.invoice && d.invoice.toLowerCase().includes(this.searchText)) ||
                          (d.name && d.name.toLowerCase().includes(this.searchText)) ||
                          (d.email && d.email.toLowerCase().includes(this.searchText)) ||
                          (d.date && d.date.toLowerCase().includes(this.searchText)) ||
                          (d.amount && d.amount.toLowerCase().includes(this.searchText)) ||
                          (d.status && d.status.toLowerCase().includes(this.searchText))
                      );
                    },

                    deleteRow(item) {
                      if (confirm('Are you sure want to delete selected row ?')) {
                        if (item) {
                          this.items = this.items.filter((d) => d.id != item);
                          this.selectedRows = [];
                        } else {
                          this.items = this.items.filter((d) => !this.selectedRows.includes(d.id));
                          this.selectedRows = [];
                        }
                      }
                    },
                  }));
                });
              </script>

</body>

</html>